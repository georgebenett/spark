#pragma once

/* TODO: REmove the hardcoded macro switches and see if it can be supported via
 * the board config instead (or completely skip MCP2517FD) */
#define MCP2518FD

enum mcp25_can_fifo_channel {
	MCP25_CAN_FIFO_CH0 = 0,
	MCP25_CAN_FIFO_CH1,
	MCP25_CAN_FIFO_CH2,
	MCP25_CAN_FIFO_CH3,
	MCP25_CAN_FIFO_CH4,
	MCP25_CAN_FIFO_CH5,
	MCP25_CAN_FIFO_CH6,
	MCP25_CAN_FIFO_CH7,
	MCP25_CAN_FIFO_CH8,
	MCP25_CAN_FIFO_CH9,
	MCP25_CAN_FIFO_CH10,
	MCP25_CAN_FIFO_CH11,
	MCP25_CAN_FIFO_CH12,
	MCP25_CAN_FIFO_CH13,
	MCP25_CAN_FIFO_CH14,
	MCP25_CAN_FIFO_CH15,
	MCP25_CAN_FIFO_CH16,
	MCP25_CAN_FIFO_CH17,
	MCP25_CAN_FIFO_CH18,
	MCP25_CAN_FIFO_CH19,
	MCP25_CAN_FIFO_CH20,
	MCP25_CAN_FIFO_CH21,
	MCP25_CAN_FIFO_CH22,
	MCP25_CAN_FIFO_CH23,
	MCP25_CAN_FIFO_CH24,
	MCP25_CAN_FIFO_CH25,
	MCP25_CAN_FIFO_CH26,
	MCP25_CAN_FIFO_CH27,
	MCP25_CAN_FIFO_CH28,
	MCP25_CAN_FIFO_CH29,
	MCP25_CAN_FIFO_CH30,
	MCP25_CAN_FIFO_CH31,
	NUM_CAN_FIFO_CHANNELS,
};

/* FIFO0 is a special FIFO, e.g. the TX Queue, hence this re-definition */
#define MCP25_CAN_TXQUEUE_CH0 MCP25_CAN_FIFO_CH0

#define MCP25_CAN_FIFO_MAX_SIZE 32

enum mcp25_can_filter {
	MCP25_CAN_FILTER0 = 0,
	MCP25_CAN_FILTER1,
	MCP25_CAN_FILTER2,
	MCP25_CAN_FILTER3,
	MCP25_CAN_FILTER4,
	MCP25_CAN_FILTER5,
	MCP25_CAN_FILTER6,
	MCP25_CAN_FILTER7,
	MCP25_CAN_FILTER8,
	MCP25_CAN_FILTER9,
	MCP25_CAN_FILTER10,
	MCP25_CAN_FILTER11,
	MCP25_CAN_FILTER12,
	MCP25_CAN_FILTER13,
	MCP25_CAN_FILTER14,
	MCP25_CAN_FILTER15,
	MCP25_CAN_FILTER16,
	MCP25_CAN_FILTER17,
	MCP25_CAN_FILTER18,
	MCP25_CAN_FILTER19,
	MCP25_CAN_FILTER20,
	MCP25_CAN_FILTER21,
	MCP25_CAN_FILTER22,
	MCP25_CAN_FILTER23,
	MCP25_CAN_FILTER24,
	MCP25_CAN_FILTER25,
	MCP25_CAN_FILTER26,
	MCP25_CAN_FILTER27,
	MCP25_CAN_FILTER28,
	MCP25_CAN_FILTER29,
	MCP25_CAN_FILTER30,
	MCP25_CAN_FILTER31,
	NUM_CAN_FIFO_FILTERS,
};

enum mcp25_can_operation_mode {
	MCP25_CAN_NORMAL_MODE = 0x00,
	MCP25_CAN_SLEEP_MODE,
	MCP25_CAN_INTERNAL_LOOPBACK_MODE,
	MCP25_CAN_LISTEN_ONLY_MODE,
	MCP25_CAN_CONFIGURATION_MODE,
	MCP25_CAN_EXTERNAL_LOOPBACK_MODE,
	MCP25_CAN_CLASSIC_MODE,
	MCP25_CAN_RESTRICTED_MODE,
	NUM_CAN_OPERATION_MODES,
};

enum mcp25_can_tx_bandwidth_sharing {
	MCP25_CAN_TXBWS_NO_DELAY = 0,
	MCP25_CAN_TXBWS_2,
	MCP25_CAN_TXBWS_4,
	MCP25_CAN_TXBWS_8,
	MCP25_CAN_TXBWS_16,
	MCP25_CAN_TXBWS_32,
	MCP25_CAN_TXBWS_64,
	MCP25_CAN_TXBWS_128,
	MCP25_CAN_TXBWS_256,
	MCP25_CAN_TXBWS_512,
	MCP25_CAN_TXBWS_1024,
	MCP25_CAN_TXBWS_2048,
	MCP25_CAN_TXBWS_4096,
};

enum mcp25_can_wakeup_filter_time {
	MCP25_CAN_WFT00 = 0,
	MCP25_CAN_WFT01,
	MCP25_CAN_WFT10,
	MCP25_CAN_WFT11
};

/* Data Byte Filter Number */
enum mcp25_can_dnet_filter_size {
	MCP25_CAN_DNET_FILTER_DISABLE = 0,
	MCP25_CAN_DNET_FILTER_SIZE_1_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_2_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_3_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_4_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_5_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_6_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_7_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_8_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_9_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_10_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_11_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_12_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_13_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_14_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_15_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_16_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_17_BIT,
	MCP25_CAN_DNET_FILTER_SIZE_18_BIT
};

enum mcp25_can_fifo_plsize {
	MCP25_CAN_PLSIZE_8 = 0,
	MCP25_CAN_PLSIZE_12,
	MCP25_CAN_PLSIZE_16,
	MCP25_CAN_PLSIZE_20,
	MCP25_CAN_PLSIZE_24,
	MCP25_CAN_PLSIZE_32,
	MCP25_CAN_PLSIZE_48,
	MCP25_CAN_PLSIZE_64
};

enum mcp25_can_dlc {
	MCP25_CAN_DLC_0 = 0,
	MCP25_CAN_DLC_1,
	MCP25_CAN_DLC_2,
	MCP25_CAN_DLC_3,
	MCP25_CAN_DLC_4,
	MCP25_CAN_DLC_5,
	MCP25_CAN_DLC_6,
	MCP25_CAN_DLC_7,
	MCP25_CAN_DLC_8,
	MCP25_CAN_DLC_12,
	MCP25_CAN_DLC_16,
	MCP25_CAN_DLC_20,
	MCP25_CAN_DLC_24,
	MCP25_CAN_DLC_32,
	MCP25_CAN_DLC_48,
	MCP25_CAN_DLC_64
};

enum mcp25_can_icode {
	MCP25_CAN_ICODE_FIFO_CH0 = 0,
	MCP25_CAN_ICODE_FIFO_CH1,
	MCP25_CAN_ICODE_FIFO_CH2,
	MCP25_CAN_ICODE_FIFO_CH3,
	MCP25_CAN_ICODE_FIFO_CH4,
	MCP25_CAN_ICODE_FIFO_CH5,
	MCP25_CAN_ICODE_FIFO_CH6,
	MCP25_CAN_ICODE_FIFO_CH7,
	MCP25_CAN_ICODE_FIFO_CH8,
	MCP25_CAN_ICODE_FIFO_CH9,
	MCP25_CAN_ICODE_FIFO_CH10,
	MCP25_CAN_ICODE_FIFO_CH11,
	MCP25_CAN_ICODE_FIFO_CH12,
	MCP25_CAN_ICODE_FIFO_CH13,
	MCP25_CAN_ICODE_FIFO_CH14,
	MCP25_CAN_ICODE_FIFO_CH15,
	MCP25_CAN_ICODE_FIFO_CH16,
	MCP25_CAN_ICODE_FIFO_CH17,
	MCP25_CAN_ICODE_FIFO_CH18,
	MCP25_CAN_ICODE_FIFO_CH19,
	MCP25_CAN_ICODE_FIFO_CH20,
	MCP25_CAN_ICODE_FIFO_CH21,
	MCP25_CAN_ICODE_FIFO_CH22,
	MCP25_CAN_ICODE_FIFO_CH23,
	MCP25_CAN_ICODE_FIFO_CH24,
	MCP25_CAN_ICODE_FIFO_CH25,
	MCP25_CAN_ICODE_FIFO_CH26,
	MCP25_CAN_ICODE_FIFO_CH27,
	MCP25_CAN_ICODE_FIFO_CH28,
	MCP25_CAN_ICODE_FIFO_CH29,
	MCP25_CAN_ICODE_FIFO_CH30,
	MCP25_CAN_ICODE_FIFO_CH31,
	MCP25_CAN_ICODE_TOTAL_CH,
	MCP25_CAN_ICODE_NO_INT = 0x40,
	MCP25_CAN_ICODE_CERRIF,
	MCP25_CAN_ICODE_WAKIF,
	MCP25_CAN_ICODE_RXOVIF,
	MCP25_CAN_ICODE_ADDRERR_SERRIF,
	MCP25_CAN_ICODE_MABOV_SERRIF,
	MCP25_CAN_ICODE_TBCIF,
	MCP25_CAN_ICODE_MODIF,
	MCP25_CAN_ICODE_IVMIF,
	MCP25_CAN_ICODE_TEFIF,
	MCP25_CAN_ICODE_TXATIF,
	MCP25_CAN_ICODE_RESERVED
};

enum mcp25_can_rxcode {
	MCP25_CAN_RXCODE_FIFO_CH1 = 1,
	MCP25_CAN_RXCODE_FIFO_CH2,
	MCP25_CAN_RXCODE_FIFO_CH3,
	MCP25_CAN_RXCODE_FIFO_CH4,
	MCP25_CAN_RXCODE_FIFO_CH5,
	MCP25_CAN_RXCODE_FIFO_CH6,
	MCP25_CAN_RXCODE_FIFO_CH7,
	MCP25_CAN_RXCODE_FIFO_CH8,
	MCP25_CAN_RXCODE_FIFO_CH9,
	MCP25_CAN_RXCODE_FIFO_CH10,
	MCP25_CAN_RXCODE_FIFO_CH11,
	MCP25_CAN_RXCODE_FIFO_CH12,
	MCP25_CAN_RXCODE_FIFO_CH13,
	MCP25_CAN_RXCODE_FIFO_CH14,
	MCP25_CAN_RXCODE_FIFO_CH15,
	MCP25_CAN_RXCODE_FIFO_CH16,
	MCP25_CAN_RXCODE_FIFO_CH17,
	MCP25_CAN_RXCODE_FIFO_CH18,
	MCP25_CAN_RXCODE_FIFO_CH19,
	MCP25_CAN_RXCODE_FIFO_CH20,
	MCP25_CAN_RXCODE_FIFO_CH21,
	MCP25_CAN_RXCODE_FIFO_CH22,
	MCP25_CAN_RXCODE_FIFO_CH23,
	MCP25_CAN_RXCODE_FIFO_CH24,
	MCP25_CAN_RXCODE_FIFO_CH25,
	MCP25_CAN_RXCODE_FIFO_CH26,
	MCP25_CAN_RXCODE_FIFO_CH27,
	MCP25_CAN_RXCODE_FIFO_CH28,
	MCP25_CAN_RXCODE_FIFO_CH29,
	MCP25_CAN_RXCODE_FIFO_CH30,
	MCP25_CAN_RXCODE_FIFO_CH31,
	MCP25_CAN_RXCODE_TOTAL_CH,
	MCP25_CAN_RXCODE_NO_INT = 0x40,
	MCP25_CAN_RXCODE_RESERVED
};

enum mcp25_can_txcode {
	MCP25_CAN_TXCODE_FIFO_CH0 = 0,
	MCP25_CAN_TXCODE_FIFO_CH1,
	MCP25_CAN_TXCODE_FIFO_CH2,
	MCP25_CAN_TXCODE_FIFO_CH3,
	MCP25_CAN_TXCODE_FIFO_CH4,
	MCP25_CAN_TXCODE_FIFO_CH5,
	MCP25_CAN_TXCODE_FIFO_CH6,
	MCP25_CAN_TXCODE_FIFO_CH7,
	MCP25_CAN_TXCODE_FIFO_CH8,
	MCP25_CAN_TXCODE_FIFO_CH9,
	MCP25_CAN_TXCODE_FIFO_CH10,
	MCP25_CAN_TXCODE_FIFO_CH11,
	MCP25_CAN_TXCODE_FIFO_CH12,
	MCP25_CAN_TXCODE_FIFO_CH13,
	MCP25_CAN_TXCODE_FIFO_CH14,
	MCP25_CAN_TXCODE_FIFO_CH15,
	MCP25_CAN_TXCODE_FIFO_CH16,
	MCP25_CAN_TXCODE_FIFO_CH17,
	MCP25_CAN_TXCODE_FIFO_CH18,
	MCP25_CAN_TXCODE_FIFO_CH19,
	MCP25_CAN_TXCODE_FIFO_CH20,
	MCP25_CAN_TXCODE_FIFO_CH21,
	MCP25_CAN_TXCODE_FIFO_CH22,
	MCP25_CAN_TXCODE_FIFO_CH23,
	MCP25_CAN_TXCODE_FIFO_CH24,
	MCP25_CAN_TXCODE_FIFO_CH25,
	MCP25_CAN_TXCODE_FIFO_CH26,
	MCP25_CAN_TXCODE_FIFO_CH27,
	MCP25_CAN_TXCODE_FIFO_CH28,
	MCP25_CAN_TXCODE_FIFO_CH29,
	MCP25_CAN_TXCODE_FIFO_CH30,
	MCP25_CAN_TXCODE_FIFO_CH31,
	MCP25_CAN_TXCODE_TOTAL_CH,
	MCP25_CAN_TXCODE_NO_INT = 0x40,
	MCP25_CAN_TXCODE_RESERVED
};

enum mcp25_can_sysclk_speed {
	MCP25_CAN_SYSCLK_40M = 0,
	MCP25_CAN_SYSCLK_20M,
	MCP25_CAN_SYSCLK_10M
};

enum mcp25_can_clko_divide {
	MCP25_OSC_CLKO_DIV1 = 0,
	MCP25_OSC_CLKO_DIV2,
	MCP25_OSC_CLKO_DIV4,
	MCP25_OSC_CLKO_DIV10
};

enum mcp25_can_rx_fifo_status {
	MCP25_CAN_RX_FIFO_EMPTY = 0x00,
	MCP25_CAN_RX_FIFO_STATUS_MASK = 0x0F,
	MCP25_CAN_RX_FIFO_NOT_EMPTY = 0x01,
	MCP25_CAN_RX_FIFO_HALF_FULL = 0x02,
	MCP25_CAN_RX_FIFO_FULL = 0x04,
	MCP25_CAN_RX_FIFO_OVERFLOW = 0x08
};

enum mcp25_can_tx_fifo_status {
	MCP25_CAN_TX_FIFO_FULL = 0x00,
	MCP25_CAN_TX_FIFO_STATUS_MASK = 0x1F7,
	MCP25_CAN_TX_FIFO_NOT_FULL = 0x01,
	MCP25_CAN_TX_FIFO_HALF_FULL = 0x02,
	MCP25_CAN_TX_FIFO_EMPTY = 0x04,
	MCP25_CAN_TX_FIFO_ATTEMPTS_EXHAUSTED = 0x10,
	MCP25_CAN_TX_FIFO_ERROR = 0x20,
	MCP25_CAN_TX_FIFO_ARBITRATION_LOST = 0x40,
	MCP25_CAN_TX_FIFO_ABORTED = 0x80,
	MCP25_CAN_TX_FIFO_TRANSMITTING = 0x100
};

enum mcp25_can_tef_fifo_status {
	MCP25_CAN_TEF_FIFO_EMPTY = 0x00,
	MCP25_CAN_TEF_FIFO_STATUS_MASK = 0x0F,
	MCP25_CAN_TEF_FIFO_NOT_EMPTY = 0x01,
	MCP25_CAN_TEF_FIFO_HALF_FULL = 0x02,
	MCP25_CAN_TEF_FIFO_FULL = 0x04,
	MCP25_CAN_TEF_FIFO_OVERFLOW = 0x08
};

enum mcp25_can_module_event {
	MCP25_CAN_NO_EVENT = 0x00,
	MCP25_CAN_ALL_EVENTS = 0xFF1F,
	MCP25_CAN_TX_EVENT = 0x0001,
	MCP25_CAN_RX_EVENT = 0x0002,
	MCP25_CAN_TIME_BASE_COUNTER_EVENT = 0x0004,
	MCP25_CAN_OPERATION_MODE_CHANGE_EVENT = 0x0008,
	MCP25_CAN_TEF_EVENT = 0x0010,
	MCP25_CAN_RAM_ECC_EVENT = 0x0100,
	MCP25_CAN_SPI_CRC_EVENT = 0x0200,
	MCP25_CAN_TX_ATTEMPTS_EVENT = 0x0400,
	MCP25_CAN_RX_OVERFLOW_EVENT = 0x0800,
	MCP25_CAN_SYSTEM_ERROR_EVENT = 0x1000,
	MCP25_CAN_BUS_ERROR_EVENT = 0x2000,
	MCP25_CAN_BUS_WAKEUP_EVENT = 0x4000,
	MCP25_CAN_RX_INVALID_MESSAGE_EVENT = 0x8000
};

enum mcp25_can_tx_fifo_event {
	MCP25_CAN_TX_FIFO_NO_EVENT = 0x00,
	MCP25_CAN_TX_FIFO_ALL_EVENTS = 0x17,
	MCP25_CAN_TX_FIFO_NOT_FULL_EVENT = 0x01,
	MCP25_CAN_TX_FIFO_HALF_FULL_EVENT = 0x02,
	MCP25_CAN_TX_FIFO_EMPTY_EVENT = 0x04,
	MCP25_CAN_TX_FIFO_ATTEMPTS_EXHAUSTED_EVENT = 0x10
};

enum mcp25_can_rx_fifo_event {
	MCP25_CAN_RX_FIFO_NO_EVENT = 0x00,
	MCP25_CAN_RX_FIFO_ALL_EVENTS = 0x0F,
	MCP25_CAN_RX_FIFO_NOT_EMPTY_EVENT = 0x01,
	MCP25_CAN_RX_FIFO_HALF_FULL_EVENT = 0x02,
	MCP25_CAN_RX_FIFO_FULL_EVENT = 0x04,
	MCP25_CAN_RX_FIFO_OVERFLOW_EVENT = 0x08
} ;

enum mcp25_can_tef_fifo_event {
	MCP25_CAN_TEF_FIFO_NO_EVENT = 0x00,
	MCP25_CAN_TEF_FIFO_ALL_EVENTS = 0x0F,
	MCP25_CAN_TEF_FIFO_NOT_EMPTY_EVENT = 0x01,
	MCP25_CAN_TEF_FIFO_HALF_FULL_EVENT = 0x02,
	MCP25_CAN_TEF_FIFO_FULL_EVENT = 0x04,
	MCP25_CAN_TEF_FIFO_OVERFLOW_EVENT = 0x08
};

enum mcp25_can_bittime_setup {
	MCP25_CAN_500K_1M = 0,
	MCP25_CAN_500K_2M,
	MCP25_CAN_500K_3M,
	MCP25_CAN_500K_4M,
	MCP25_CAN_500K_5M,
	MCP25_CAN_500K_6M7,
	MCP25_CAN_500K_8M,
	MCP25_CAN_500K_10M,
	MCP25_CAN_250K_500K,
	MCP25_CAN_250K_833K,
	MCP25_CAN_250K_1M,
	MCP25_CAN_250K_1M5,
	MCP25_CAN_250K_2M,
	MCP25_CAN_250K_3M,
	MCP25_CAN_250K_4M,
	MCP25_CAN_1000K_4M,
	MCP25_CAN_1000K_8M,
	MCP25_CAN_125K_500K
};

enum mcp25_can_nominal_bittime_setup {
	MCP25_CAN_NBT_125K = 0,
	MCP25_CAN_NBT_250K,
	MCP25_CAN_NBT_500K,
	MCP25_CAN_NBT_1M
};

enum mcp25_can_data_bittime_setup {
	MCP25_CAN_DBT_500K = 0,
	MCP25_CAN_DBT_833K,
	MCP25_CAN_DBT_1M,
	MCP25_CAN_DBT_1M5,
	MCP25_CAN_DBT_2M,
	MCP25_CAN_DBT_3M,
	MCP25_CAN_DBT_4M,
	MCP25_CAN_DBT_5M,
	MCP25_CAN_DBT_6M7,
	MCP25_CAN_DBT_8M,
	MCP25_CAN_DBT_10M
};

enum mcp25_can_ssp_mode {
	MCP25_CAN_SSP_MODE_OFF = 0,
	MCP25_CAN_SSP_MODE_MANUAL,
	MCP25_CAN_SSP_MODE_AUTO
};

enum mcp25_can_error_state {
	MCP25_CAN_ERROR_FREE_STATE = 0x00,
	MCP25_CAN_ERROR_ALL = 0x3F,
	MCP25_CAN_TX_RX_WARNING_STATE = 0x01,
	MCP25_CAN_RX_WARNING_STATE = 0x02,
	MCP25_CAN_TX_WARNING_STATE = 0x04,
	MCP25_CAN_RX_BUS_PASSIVE_STATE = 0x08,
	MCP25_CAN_TX_BUS_PASSIVE_STATE = 0x10,
	MCP25_CAN_TX_BUS_OFF_STATE = 0x20
};

enum mcp25_can_ts_mode {
	MCP25_CAN_TS_SOF = 0x00,
	MCP25_CAN_TS_EOF = 0x01,
	MCP25_CAN_TS_RES = 0x02
};

enum mcp25_can_ecc_event {
	MCP25_CAN_ECC_NO_EVENT = 0x00,
	MCP25_CAN_ECC_ALL_EVENTS = 0x06,
	MCP25_CAN_ECC_SEC_EVENT = 0x02,
	MCP25_CAN_ECC_DED_EVENT = 0x04
};

enum mcp25_can_crc_event {
	MCP25_CAN_CRC_NO_EVENT = 0x00,
	MCP25_CAN_CRC_ALL_EVENTS = 0x03,
	MCP25_CAN_CRC_CRCERR_EVENT = 0x01,
	MCP25_CAN_CRC_FORMERR_EVENT = 0x02
};

enum mcp25_gpio_pin_pos {
	MCP25_GPIO_PIN_0 = 0,
	MCP25_GPIO_PIN_1,
	NUM_GPIO_PIN_POS,
};

enum mcp25_gpio_pin_mode {
	MCP25_GPIO_MODE_INT = 0,
	MCP25_GPIO_MODE_GPIO,
	NUM_GPIO_PIN_MODES,
};

enum mcp25_gpio_pin_direction {
	MCP25_GPIO_OUTPUT = 0,
	MCP25_GPIO_INPUT,
	NUM_GPIO_PIN_DIRS,
};

enum mcp25_gpio_open_drain_mode {
	MCP25_GPIO_PUSH_PULL = 0,
	MCP25_GPIO_OPEN_DRAIN,
	NUM_GPIO_PIN_OPEN_DRAIN_MODES,
};

enum mcp25_gpio_pin_state {
	MCP25_GPIO_LOW,
	MCP25_GPIO_HIGH,
	NUM_GPIO_PIN_STATES,
};

enum mcp25_gpio_clko_mode {
	MCP25_GPIO_CLKO_CLOCK,
	MCP25_GPIO_CLKO_SOF,
	NUM_GPIO_CLKO_MODES,
};

/* TXREQ Channel Bits, multiple channels can be or'ed together */
enum mcp25_can_txreq_channel {
	MCP25_CAN_TXREQ_CH0 = 0x00000001,
	MCP25_CAN_TXREQ_CH1 = 0x00000002,
	MCP25_CAN_TXREQ_CH2 = 0x00000004,
	MCP25_CAN_TXREQ_CH3 = 0x00000008,
	MCP25_CAN_TXREQ_CH4 = 0x00000010,
	MCP25_CAN_TXREQ_CH5 = 0x00000020,
	MCP25_CAN_TXREQ_CH6 = 0x00000040,
	MCP25_CAN_TXREQ_CH7 = 0x00000080,

	MCP25_CAN_TXREQ_CH8 = 0x00000100,
	MCP25_CAN_TXREQ_CH9 = 0x00000200,
	MCP25_CAN_TXREQ_CH10 = 0x00000400,
	MCP25_CAN_TXREQ_CH11 = 0x00000800,
	MCP25_CAN_TXREQ_CH12 = 0x00001000,
	MCP25_CAN_TXREQ_CH13 = 0x00002000,
	MCP25_CAN_TXREQ_CH14 = 0x00004000,
	MCP25_CAN_TXREQ_CH15 = 0x00008000,

	MCP25_CAN_TXREQ_CH16 = 0x00010000,
	MCP25_CAN_TXREQ_CH17 = 0x00020000,
	MCP25_CAN_TXREQ_CH18 = 0x00040000,
	MCP25_CAN_TXREQ_CH19 = 0x00080000,
	MCP25_CAN_TXREQ_CH20 = 0x00100000,
	MCP25_CAN_TXREQ_CH21 = 0x00200000,
	MCP25_CAN_TXREQ_CH22 = 0x00400000,
	MCP25_CAN_TXREQ_CH23 = 0x00800000,

	MCP25_CAN_TXREQ_CH24 = 0x01000000,
	MCP25_CAN_TXREQ_CH25 = 0x02000000,
	MCP25_CAN_TXREQ_CH26 = 0x04000000,
	MCP25_CAN_TXREQ_CH27 = 0x08000000,
	MCP25_CAN_TXREQ_CH28 = 0x10000000,
	MCP25_CAN_TXREQ_CH29 = 0x20000000,
	MCP25_CAN_TXREQ_CH30 = 0x40000000,
	MCP25_CAN_TXREQ_CH31 = 0x80000000
};

struct mcp25_can_cfg {
	uint32_t dnet_filter_cnt : 5;
	uint32_t iso_crc_enable : 1;
	uint32_t prot_except_evt_disable : 1;
	uint32_t wakeup_filter_enable : 1;
	uint32_t wakeup_filter_time : 2;
	uint32_t bit_rate_switch_disable : 1;
	uint32_t restrict_re_tx_attempts : 1;
	uint32_t esi_in_gateway_mode : 1;
	uint32_t sys_err_to_listen_only : 1;
	uint32_t store_in_tef : 1;
	uint32_t txq_enable : 1;
	uint32_t tx_bw_sharing : 4;
};

struct mcp25_can_tx_fifo_cfg {
	uint32_t rtr_enable : 1;
	uint32_t tx_prio : 5;
	uint32_t tx_attempts : 2;
	uint32_t fifo_size : 5;
	uint32_t payload_size : 3;
};

struct mcp25_can_tx_queue_cfg {
	uint32_t tx_prio : 5;
	uint32_t tx_attempts : 2;
	uint32_t fifo_size : 5;
	uint32_t payload_size : 3;
};

struct mcp25_can_rx_fifo_cfg {
	uint32_t rx_ts_enable : 1;
	uint32_t fifo_size : 5;
	uint32_t payload_size : 3;
};

struct mcp25_can_tef_cfg {
	uint32_t ts_enable : 1;
	uint32_t fifo_size : 5;
};

struct mcp25_can_msgobj_id {
	uint32_t SID : 11;
	uint32_t EID : 18;
	uint32_t SID11 : 1;
	uint32_t dummy_0 : 2;
};

struct mcp25_can_tx_msgobj_ctrl {
	uint32_t DLC : 4;
	uint32_t IDE : 1;
	uint32_t RTR : 1;
	uint32_t BRS : 1;
	uint32_t FDF : 1;
	uint32_t esi : 1;
#ifdef MCP2517FD
	uint32_t SEQ : 7;
	uint32_t dummy_0 : 16;
#else
	uint32_t SEQ : 23;
#endif
};

struct mcp25_can_rx_msgobj_ctrl {
	uint32_t DLC : 4;
	uint32_t IDE : 1;
	uint32_t RTR : 1;
	uint32_t BRS : 1;
	uint32_t FDF : 1;
	uint32_t esi : 1;
	uint32_t dummy_0 : 2;
	uint32_t filter_hit : 5;
	uint32_t dummy_1 : 16;
};

struct mcp25_can_filterobj_id {
	uint32_t SID : 11;
	uint32_t EID : 18;
	uint32_t SID11 : 1;
	uint32_t EXIDE : 1;
	uint32_t dummy_0 : 1;
};

struct mcp25_can_maskobj_id {
	uint32_t MSID : 11;
	uint32_t MEID : 18;
	uint32_t MSID11 : 1;
	uint32_t MIDE : 1;
	uint32_t dummy_0 : 1;
};

struct mcp25_can_bus_diag_flags {
	uint32_t NBIT0_ERR : 1;
	uint32_t NBIT1_ERR : 1;
	uint32_t NACK_ERR : 1;
	uint32_t NFORM_ERR : 1;
	uint32_t NSTUFF_ERR : 1;
	uint32_t NCRC_ERR : 1;
	uint32_t dummy_0 : 1;
	uint32_t TXBO_ERR : 1;
	uint32_t DBIT0_ERR : 1;
	uint32_t DBIT1_ERR : 1;
	uint32_t dummy_1 : 1;
	uint32_t DFORM_ERR : 1;
	uint32_t DSTUFF_ERR : 1;
	uint32_t DCRC_ERR : 1;
	uint32_t esi : 1;
	uint32_t DLC_MISMATCH : 1;
};

struct mcp25_can_bus_error_count {
	uint8_t NREC;
	uint8_t NTEC;
	uint8_t DREC;
	uint8_t DTEC;
};

struct mcp25_can_osc_ctrl {
	uint32_t pll_enable : 1;
	uint32_t osc_disable : 1;
	uint32_t sclk_div : 1;
	uint32_t clk_out_div : 2;
#ifndef MCP2517FD
	uint32_t low_pwr_mode_enable : 1;
#endif
};

struct mcp25_can_osc_status {
	uint32_t pll_rdy : 1;
	uint32_t osc_rdy : 1;
	uint32_t sclk_rdy : 1;
};

union mcp25_can_tx_msgobj {
	struct {
		struct mcp25_can_msgobj_id id;
		struct mcp25_can_tx_msgobj_ctrl ctrl;
		uint32_t ts;
	} bf;

	uint32_t word[3];
	uint8_t byte[12];
};

union mcp25_can_rx_msgobj {
	struct {
		struct mcp25_can_msgobj_id id;
		struct mcp25_can_rx_msgobj_ctrl ctrl;
		uint32_t ts;
	} bf;

	uint32_t word[3];
	uint8_t byte[12];
};

union mcp25_can_tef_msgobj {
	struct {
		struct mcp25_can_msgobj_id id;
		struct mcp25_can_tx_msgobj_ctrl ctrl;
		uint32_t ts;
	} bf;

	uint32_t word[3];
	uint8_t byte[12];
};

union mcp25_can_bus_diag {
	struct {
		struct mcp25_can_bus_error_count err_cnt;
		uint16_t errorFreeMsgCount;
		struct mcp25_can_bus_diag_flags flag;
	} bf;

	uint32_t word[2];
	uint8_t byte[8];
};
